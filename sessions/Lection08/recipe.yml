---
- hosts: all
  #accelerate: true
#  tasks:
#
#  - name: ensure locales are present
#    copy: src=content/locale dest=/etc/default/locale owner=root group=root mode=644
#  - name: generate present locales
#    raw: locale-gen en_US.UTF-8 && dpkg-reconfigure locales
#  - name: ensure rotating docker logs
#    copy: src=content/docker_logrotate_custom dest=/etc/logrotate.d/docker_logrotate_custom owner=root group=root mode=644
#
#  - name: ensure setting  soft limits
#    lineinfile: dest=/etc/security/limits.conf
#              line='*   soft    nofile  999999'
#
#  - name: ensure setting  hard limits
#    lineinfile: dest=/etc/security/limits.conf
#              line='*   hard    nofile  999999'
#
#  - name: ensure setting  soft limits for root
#    lineinfile: dest=/etc/security/limits.conf
#              line='root   soft    nofile  999999'
#
#  - name: ensure setting  hard limits for root
#    lineinfile: dest=/etc/security/limits.conf
#              line='root   hard    nofile  999999'
#
#  - name: ensure setting  sessions for ent sessions
#    lineinfile: dest=/etc/pam.d/common-session
#              line='session required pam_limits.so'
#  - name: ensure setting  sessions for non ent sessions
#    lineinfile: dest=/etc/pam.d/common-session-noninteractive
#              line='session required pam_limits.so'
#
#
#
#
#  - name: Disable THP after startup for redis step 1
#    lineinfile: dest=/etc/rc.local
#              regexp='^echo never > /sys/kernel/mm/transparent_hugepage/enabled'
#              line='echo never > /sys/kernel/mm/transparent_hugepage/enabled'
#              insertbefore=BOF
#  - name: Disable THP after startup for redis step 2
#    lineinfile: dest=/etc/rc.local
#              regexp='^echo never > /sys/kernel/mm/transparent_hugepage/defrag'
#              line='echo never > /sys/kernel/mm/transparent_hugepage/defrag'
#              insertbefore=BOF
#  - name: Disable THP on a running system for redis step 1
#    raw: sudo echo never > /sys/kernel/mm/transparent_hugepage/enabled
#  - name: Disable THP on a running system for redis step 2
#    raw: sudo echo never > /sys/kernel/mm/transparent_hugepage/defrag
#
#
#
  tasks:
  - name: ensure apt cache is up to date
    apt: update_cache=yes cache_valid_time=3600
  - name: ensure packages are installed
    apt: name={{item}}
    with_items:
        - python-psycopg2
        - python-pip
        - apparmor-utils
        - sysv-rc-conf
        - mc
        - nano
        - screen
        - htop
        - libpq-dev
        - python-pycurl
        - python-dev
#
#  - name: ensure packages docker-py installed
#    raw: pip install docker-py
#
#  - name: ensure packages redis python installed
#    raw: pip install redis
#  - name: ensure packages python-keyczar installed
#    raw: pip install python-keyczar
#  - name: test sysdig
#    stat: path=/usr/bin/sysdig
#    register: sysdig
#  - name: install sysdig
#    raw: curl -s https://s3.amazonaws.com/download.draios.com/stable/install-sysdig | sudo bash
#    when: not sysdig.stat.exists
#
#
#  - name: ensure apparmor stoped
#    service: name=apparmor
#          enabled=no
#          state=stopped
#
#
#  - name: ensure packages apparmor are remooved
#    apt: name={{item}} state=absent
#    with_items:
#        - apparmor
#        - apparmor-utils
#
#
#
#  - name: Add sysctl tuning
#    sysctl: name={{ item.name }} value="{{item.value}}" state=present reload=yes
#    with_items:
#
#        - { name: 'net.core.rmem_max', value: '16777216' }
#        - { name: 'net.core.wmem_max', value: '16777216' }
#        - { name: 'net.core.rmem_default', value: '65536' }
#        - { name: 'net.core.wmem_default', value: '65536' }
#        - { name: 'net.ipv4.tcp_rmem', value: '4096 87380 16777216' }
#        - { name: 'net.ipv4.tcp_wmem', value: '4096 87380 16777216' }
#        - { name: 'net.ipv4.tcp_mem', value: '8388608 8388608 8388608' }
#        - { name: 'net.ipv4.tcp_max_tw_buckets', value: '6000000' }
#        - { name: 'net.ipv4.tcp_max_syn_backlog', value: '65536' }
#        - { name: 'net.ipv4.tcp_max_orphans', value: '262144' }
#        - { name: 'net.core.somaxconn ', value: ' 16384' }
#        - { name: 'net.core.netdev_max_backlog ', value: '16384' }
#        - { name: 'net.ipv4.tcp_synack_retries ', value: '5' }
#        - { name: 'net.ipv4.tcp_syn_retries ', value: '5' }
#        - { name: 'net.ipv4.tcp_fin_timeout ', value: '7' }
#        - { name: 'net.ipv4.tcp_slow_start_after_idle ', value: '0' }
#        - { name: 'vm.swappiness ', value: '0' }
#        - { name: 'net.ipv4.tcp_syncookies ', value: '0' }
#        - { name: 'net.ipv4.ip_local_port_range ', value: '1024 65535' }
#        - { name: 'net.ipv4.tcp_congestion_control ', value: 'cubic' }
#        - { name: 'net.ipv4.tcp_keepalive_time ', value: '1800' }
#        - { name: 'net.ipv4.tcp_sack ', value: '0' }
#        - { name: 'vm.vfs_cache_pressure ', value: '50' }
#        - { name: 'net.ipv4.tcp_sack ', value: '0' }
#        - { name: 'fs.file-max', value: '65536' }
#        - { name: 'vm.overcommit_memory', value: '0' }

  - name: Create swap space
    command: fallocate -l 2G /swapfile
    when: ansible_swaptotal_mb < 1

  - name: Make swap
    command: mkswap /swapfile
    when: ansible_swaptotal_mb < 1

  - name: Add to fstab
    action: lineinfile dest=/etc/fstab regexp="extraswap" line="/swapfile none swap sw 0 0" state=present

  - name: Turn swap on
    command: swapon -a

  - name: Set swapiness
    shell: echo 0 | sudo tee /proc/sys/vm/swappiness

  - name: set swapiness
    sysctl:
      name: vm.swappiness
      value: "0"


- hosts: db_postgresql
  sudo: yes

  tasks:
  - name: ensure apt cache is up to date
    apt: update_cache=yes cache_valid_time=3600
  
  - name: ensure packages are installed
    apt: name={{item}}

    with_items:
        - postgresql
        - postgresql-contrib




  - name: Start PostgreSQL and enable at boot
    service: name=postgresql
            enabled=yes
            state=started

- hosts: db_postgresql
  sudo: yes
  sudo_user: postgres
  gather_facts: no



  tasks:
  - name: ensure database is created
    postgresql_db: name={{dbname}}

  - name: ensure user has access to database
    postgresql_user: db={{dbname}} name={{dbuser}} password={{dbpassword}} priv=ALL

  - name: ensure user does not have unnecessary privilege
    postgresql_user: name={{dbuser}} role_attr_flags=NOSUPERUSER,NOCREATEDB
#test connect psql -U django2222 -W -d myapp2222 -h 127.0.0.1
##{{ hostvars['hostname']['ansible_eth1']['ipv4']['address'] }}
  - name: Adds hstore exatension to the database 
    postgresql_ext: name=hstore db={{dbname}}
#
#  - name: Ensure PostgreSQL is listening on localhost and private network and tuning
#    lineinfile: dest=/etc/postgresql/{{version}}/main/postgresql.conf
#       regexp='^#?listen_addresses\s*='
#       line="listen_addresses = '127.0.0.1,{{listenip}}'"
#       state=present
##
#
#  - lineinfile: dest=/etc/postgresql/{{version}}/main/postgresql.conf
#                 regexp='^max_connections'
#                 line='max_connections = {{max_connections}}'
#                 insertbefore=BOF
#
#  - lineinfile: dest=/etc/postgresql/{{version}}/main/postgresql.conf
#                 regexp='^shared_buffers'
#                 line='shared_buffers = {{(ansible_memtotal_mb/4)|int}}MB'
#                 insertbefore=BOF
#
#  - lineinfile: dest=/etc/postgresql/{{version}}/main/postgresql.conf
#                 regexp='^effective_cache_size'
#                 line='effective_cache_size = {{(ansible_memtotal_mb*0.75)|int}}MB'
#                 insertbefore=BOF
#
#  - lineinfile: dest=/etc/postgresql/{{version}}/main/postgresql.conf
#                 regexp='^work_mem'
#                 line='work_mem = {{(ansible_memtotal_mb*0.25/max_connections*1024)|int}}kB'
#                 insertbefore=BOF
#
#  - lineinfile: dest=/etc/postgresql/{{version}}/main/postgresql.conf
#                 regexp='^maintenance_work_mem'
#                 line='maintenance_work_mem = {{(ansible_memtotal_mb/16)|int}}MB'
#                 insertbefore=BOF
#
#  - lineinfile: dest=/etc/postgresql/{{version}}/main/postgresql.conf
#                 regexp='^checkpoint_segments'
#                 line='checkpoint_segments = 32'
#                 insertbefore=BOF
#
#  - lineinfile: dest=/etc/postgresql/{{version}}/main/postgresql.conf
#                 regexp='^checkpoint_completion_target'
#                 line='checkpoint_completion_target = 0.7'
#                 insertbefore=BOF
#
#  - lineinfile: dest=/etc/postgresql/{{version}}/main/postgresql.conf
#                 regexp='^wal_buffers'
#                 line='wal_buffers = {{((ansible_memtotal_mb/4*1024)/32)|int}}kB'
#                 insertbefore=BOF
#    when: (ansible_memtotal_mb/4)|int < 512
#
#  - lineinfile: dest=/etc/postgresql/{{version}}/main/postgresql.conf
#                 regexp='^wal_buffers'
#                 line='wal_buffers = 16MB'
#                 insertbefore=BOF
#    when: (ansible_memtotal_mb/4)|int >= 512
#
#  - lineinfile: dest=/etc/postgresql/{{version}}/main/postgresql.conf
#                 regexp='^default_statistics_target'
#                 line='default_statistics_target = 100'
#                 insertbefore=BOF
#
#
#
#
#  - lineinfile: dest=/etc/postgresql/{{version}}/main/pg_hba.conf
#                 regexp='host\s+all\s+all\s+127.0.0.1/32\s+md5'
#                 line='host all all 127.0.0.1/32 md5'
#                 insertbefore=BOF
#
#
#  - lineinfile: dest=/etc/postgresql/{{version}}/main/pg_hba.conf
#                 regexp='host\s+all\s+all\s+10.0.0.0/8\s+md5'
#                 line='host all all 10.0.0.0/8 md5'
#                 insertbefore=BOF
#
#  - lineinfile: dest=/etc/postgresql/{{version}}/main/pg_hba.conf
#                 regexp='host\s+all\s+all\s+192.168.0.0/16\s+md5'
#                 line='host all all 192.168.0.0/16 md5'
#                 insertbefore=BOF
#
#  - lineinfile: dest=/etc/postgresql/{{version}}/main/pg_hba.conf
#                 regexp='host\s+all\s+all\s+172.16.0.0/12\s+md5'
#                 line='host all all 172.16.0.0/12 md5'
#                 insertbefore=BOF
#    notify: restart postgresql
#


  handlers:
  - name: restart postgresql
    service: name=postgresql state=restarted
