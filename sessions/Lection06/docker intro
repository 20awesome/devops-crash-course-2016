


static0.aliveshoes.com static1.aliveshoes.com static2.aliveshoes.com static3.aliveshoes.com
ssh root@178.62.208.71

Во первых почему докер,докер портовый рабочий,рабочий дока( аналог с контейнерами до 1960 года)



 на тесте массового создания виртуальных вычислительных узлов прирост потребления процессорных ресурсов в Docker зафиксирован в 26 раз ниже, чем в KVM, а прирост потребления ресурсов оперативной памяти — втрое ниже



Docker хранит созданные вами образы в реестрах. Существует два типа реестров: публичные и приватные. Официальный реестр называется Docker Hub. Создав в нем аккаунт, можно сохранять свои образы в нем и делиться ими с другими пользователями , по умолчанию 1 приватный реестр.

Docker прекрасно подходит для организации цикла разработки. Docker позволяет разработчикам использовать локальные контейнеры с приложениями и сервисами. Что в последствии позволяет интегрироваться с процессом постоянной интеграции и выкладывания (continuous integration and deployment workflow).



Создаем контейнер-демон

Конечно, можно создавать и долгоживущие контейнеры, подходящие для запусков приложений и сервисов. Такие контейнеры не имеют интерактивной сессии.
docker run --name city -d ubuntu /bin/bash -c "while true; do echo hello world; sleep 1; done"
, где city – имя контейнера. 
Посмотреть, что происходит внутри контейнера можно командой docker logs <имя контейнера>.
Остановить контейнер можно командой docker stop <имя контейнера>. Если после этого запустить контейнер снова docker start <имя контейнера>, выполнение цикла while продолжится в контейнере.

Увидеть детали контейнера можно командой docker inspect <имя контейнера>.
Чтобы удалить контейнер, используйте docker rm <имя контейнера>.


Как достать и положить данные?

Для того, чтобы скопировать данные в контейнер или вынуть из него, необходимо воспользоваться командой 
docker cp <путь к данным на хосте> <имя контейнера>:<путь>

Можно подмонтировать папку хоста в контейнер при создании: 
docker run -v /tmp:/root -t -i <имя образа>
,
где /tmp – путь к папке на хосте, а /root – путь к папке на сервере. Таким образом можно работать из контейнера с данными на хосте и исключить необходимость копирования данных в обе стороны.
sudo docker run --restart=always -d myimage


docker commit <id контейнера> <имя образа>



Перенос образа на другой хост

Наконец-то о главном. Допустим, вы настроили свое приложение в Docker и закоммитили в образ. Теперь можно сохранить образ в файл 
docker save имя_образа > ~/transfer.tar

Копируем этот образ на другой хост например с помощью scp и импортируем его в Docker.
docker load < /tmp/transfer.tar

Вот и все, можно легко переносить свои приложения между хостами, облаками и собственными серверами. Никакого vendor–lock. Только ради этого стоит использовать Docker! (если вы сохраняли данные на примонтированную файловую систему, не забудьте перенести и их).



Docker-демон

Как показано на диаграмме, демон за пускается на хост-машине. Пользователь не взаимодействие с сервером на прямую, а использует для этого клиент.

Docker-клиент

Docker-клиент, программа docker — главный интерфейс к Docker. Она получает команды от пользователя и взаимодействует с docker-демоном.

Внутри docker-а

Чтобы понимать, из чего состоит docker, вам нужно знать о трех компонентах:
образы (images)
реестр (registries)
контейнеры


Образы

Docker-образ — это read-only шаблон. Например, образ может содержать операционку Ubuntu c Apache и приложением на ней. Образы используются для создания контейнеров. Docker позволяет легко создавать новые образы, обновлять существующие, или вы можете скачать образы созданные другими людьми. Образы — это компонента сборки docker-а.

Реестр

Docker-реестр хранит образы. Есть публичные и приватные реестры, из которых можно скачать либо загрузить образы. Публичный Docker-реестр — это Docker Hub. Там хранится огромная коллекция образов. Как вы знаете, образы могут быть созданы вами или вы можете использовать образы созданные другими. Реестры — это компонента распространения.

Контейнеры

Контейнеры похожи на директории. В контейнерах содержится все, что нужно для работы приложения. Каждый контейнер создается из образа. Контейнеры могут быть созданы, запущены, остановлены, перенесены или удалены. Каждый контейнер изолирован и является безопасной платформой для приложения. Контейнеры — это компонента работы.



Docker, по порядку, делает следующее:
скачивает образ ubuntu: docker проверяет наличие образа ubuntu на локальной машине, и если его нет — то скачивает его с Docker Hub. Если же образ есть, то использует его для создания контейнера;
создает контейнер: когда образ получен, docker использует его для создания контейнера;
инициализирует файловую систему и монтирует read-only уровень: контейнер создан в файловой системе и read-only уровень добавлен образ;
инициализирует сеть/мост: создает сетевой интерфейс^ который позволяет docker-у общаться хост машиной;
Установка IP адреса: находит у задает адрес;
Запускает указанный процесс: запускает ваше приложение;
Обрабатывает и выдает вывод вашего приложения: подключается и логирует стандартный вход, вывод и поток ошибок вашего приложения, что бы вы могли отслеживать как работает ваше приложение.




